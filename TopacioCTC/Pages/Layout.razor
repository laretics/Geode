@page "/layout/{Id:int}"
@using MontefaroMatias.LayoutView.Elements
@using MontefaroMatias.LayoutView.Elements.Layout
@using MontefaroMatias.Locking
@using MontefaroMatias.Users
@inject TopacioClient mvarTopacioClient
@inject TopacioLayoutService mvarTopacioLayout

<div class="ctc-canvas-container bg-black d-flex justify-content-center align-items-center">
    @* <MtCanvas View=view StaticView=mvarStorageService.RenderCache/> *@
    <MtCanvasExpress FileName="cfvm" View="@view" OnElementClick="OnElementClick"/>
</div>
<div class="container-md">
    <div class="row">
        <div class="m6">
            <h3>@showSelElements()</h3>
        </div>
    </div>
    @if(currentUserLevel>1)
    {
        <div class="row">
            <div class="col-md-4">
                <div class="btn-group btn-group-sm">
                    <button type="button" class="btn btn-secondary" onclick="@clearElements">
                        <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="white"><path d="M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM360-280h80v-360h-80v360Zm160 0h80v-360h-80v360ZM280-720v520-520Z" /></svg>
                    </button>
                    <button type="button" class="btn btn-secondary" onclick="@InitOrder">
                        <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="m480-320 160-160-160-160-56 56 64 64H320v80h168l-64 64 56 56Zm0 240q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z" /></svg>
                    </button>
                    <button type="button" class="btn btn-warning" onclick="@OnDai">
                        <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z" /></svg>
                    </button>
                    <button type="button" class="btn btn-secondary" onclick="@OnOccupancy">
                        <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M160-340v-380q0-53 27.5-84.5t72.5-48q45-16.5 102.5-22T480-880q66 0 124.5 5.5t102 22q43.5 16.5 68.5 48t25 84.5v380q0 59-40.5 99.5T660-200l60 60v20h-80l-80-80H400l-80 80h-80v-20l60-60q-59 0-99.5-40.5T160-340Zm320-460q-106 0-155 12.5T258-760h448q-15-17-64.5-28.5T480-800ZM240-560h200v-120H240v120Zm420 80H240h480-60Zm-140-80h200v-120H520v120ZM340-320q26 0 43-17t17-43q0-26-17-43t-43-17q-26 0-43 17t-17 43q0 26 17 43t43 17Zm280 0q26 0 43-17t17-43q0-26-17-43t-43-17q-26 0-43 17t-17 43q0 26 17 43t43 17Zm-320 40h360q26 0 43-17t17-43v-140H240v140q0 26 17 43t43 17Zm180-480h226-448 222Z" /></svg>
                    </button>
                </div>
            </div>
        </div>
    }
</div>
@code
{
    [Parameter]
    public int Id { get; set; }
    [CascadingParameter]
    public User? CurrentUser { get; set; }

    private int currentUserLevel { get => (null == CurrentUser) ? 0 : CurrentUser.Level; }
    private MontefaroMatias.LayoutView.Topology mvartt = new Topology();
    private View? view { get; set; } = new View();
    private DynamicElement? mvarOrigin = null;
    private bool mvarOccupancyRequested = false;

    protected async override Task OnInitializedAsync()
    {
        //En esta rutina de la carga del Layout es donde haré una sola vez la carga de los datos de la topología.
        await UpdateTopo();        
        // portableOrders? auxOrders = await mvarTopacioClient.getOrders();        
        // if (null != auxOrders)
        //     mcolOrders = auxOrders;

        //DynamicElement.AddElementCallback = clickElement;
        //mvarStorageService.OnUpdateReceived += OnUpdateReceived;
    }

    protected override async Task OnParametersSetAsync()
    {
        //Necesito la lista de las vistas para saber qué parámetros tengo que aplicar cuando seleccione una de ellas.
        Views? auxVistas = await mvarTopacioClient.getViewsList();
        if(null!=auxVistas)
            view = auxVistas.view(Id);
    }

    private async Task OnElementClick(string id)
    {

    }

    /// <summary>
    /// Actualizaremos los colores y la presentación del enclavamiento
    /// </summary>
    /// <returns></returns>
    protected async Task UpdateTopo()
    {
        MontefaroMatias.Models.Elements.LayoutModel? portaTopo = await mvarTopacioClient.getLayoutCurrentStatus();
        StateHasChanged();
        await mvarTopacioLayout.UpdateCanvasExpress(portaTopo);
    }
    /// <summary>
    /// Este método se activa cada vez que haya recibido alguna notificación
    /// desde el servidor. Permite que todos los observadores vean el mismo
    /// estado en el enclavamiento.
    /// </summary>
    /// <returns></returns>
    private async Task OnUpdateReceived()
    {
        await UpdateTopo();
        //StateHasChanged();
    }

    /// <summary>
    /// Primer paso:
    /// * Anula la posible petición de transacción en curso
    /// * Elimina la selección de todos los elementos
    /// * Marca los elementos primarios
    /// TODO: No debe poder marcar los elementos primarios que
    ///         estén formando parte de un itinerario enclavado.
    /// </summary>
    private void InitOrder()
    {
        mvartt.ClearSelection();
        mvarOrigin = null;
        // mcolPossibleOrders.Clear();
        // foreach (portableOp order in mcolOrders.or)
        // {
        //     if (mcolDynamics.ContainsKey(order.or))
        //         mcolDynamics[order.or].selected = true;
        // }
        StateHasChanged();
    }

    /// <summary>
    /// En el momento en que se hace click sobre un elemento
    /// salta esta función.
    /// </summary>
    /// <param name="id"></param>
    // private void clickElement(string? id)
    // {
    //     if(null!=id)
    //     {
    //         if (mcolDynamics.ContainsKey(id))
    //         {
    //             DynamicElement element = mcolDynamics[id];
    //             if (element.selected)
    //                 clickReference(element);
    //         }
    //     }
    // }
    private async Task clickReference(DynamicElement rhs)
    {
        mvartt.ClearSelection(); //Primero quitamos las marcas en el enclavamiento
        if(mvarOccupancyRequested)
        {

            mvarOrigin = null;
            await mvarTopacioClient.occupancy(rhs.name);
            mvarOccupancyRequested = false;
            await UpdateTopo();
        }
        else
        {
            if (null == mvarOrigin)
            {
                mvarOrigin = rhs;
                // foreach (portableOp candidate in mcolOrders.or)
                // {
                //     if (candidate.or.Equals(mvarOrigin.name))
                //     {
                //         mcolPossibleOrders.Add(candidate);
                //         //Marcamos el destino de esta orden para su selección.
                //         if (mcolDynamics.ContainsKey(candidate.ds))
                //         {
                //             DynamicElement destino = mcolDynamics[candidate.ds];
                //             destino.selected = true;
                //         }
                //     }
                // }
            }
            else
            {
                // //Buscamos ahora entre las órdenes que tienen el destino en el elemento
                // //seleccionado y encargamos la orden al enclavamiento.
                // foreach (portableOp candidate in mcolPossibleOrders)
                // {
                //     if (candidate.ds.Equals(rhs.name))
                //     {
                //         //Tenemos la orden.
                //         await mvarTopacioClient.processOrder(candidate.id);
                //     }
                // }
                //Tanto si la ha encontrado como si no, volvemos al estado de inicio.
                mvarOrigin = null;
                await UpdateTopo();
            }
        }

        StateHasChanged();
    }
    protected async Task OnDai()
    {
        mvartt.Dai();
        await mvarTopacioClient.processTextOrder("DAI");
        mvarOrigin = null;
        StateHasChanged();
    }
    protected void OnOccupancy()
    {
        //Activamos la ocupación forzada.
        mvarOccupancyRequested = true;
        foreach(Unit elemento in mvartt.Circuits.Values)
        {
            elemento.selected = true;
        }

    }

    private bool hasToDrawTable{ get => mvartt.selOperations().Count < 5; }
    private bool hasToDrawDai{ get => mvartt.activeOperations.Count > 0; }

    private List<LockOperation> lockOperations()
    {
        return mvartt.selOperations();
    }
    private List<LockOperation> activeOperations()
    {
        return mvartt.activeOperations;
    }

    private string showSelElements()
    {
        System.Text.StringBuilder salida = new System.Text.StringBuilder();
        foreach (string element in mvartt.selElements)
        {
            salida.Append(element);
            salida.Append(" ");
        }
        return salida.ToString();
    }

    private void addElement(string? id)
    {
        //Añade un nuevo elemento a la lista de referencias.
        if(null!=id)
        {
            if (!mvartt.selElements.Contains(id))
            {
                mvartt.selElements.Add(id);
                List<LockOperation> auxLista = mvartt.selOperations();
                if (1 == auxLista.Count) ExecuteElement(auxLista[0]);
                StateHasChanged();
            }                       
        }
    }
    private void ExecuteElement(LockOperation rhs)
    {
        mvartt.ExecuteOperation(rhs);
        //auxSender.send(mvartt);
        clearElements();
    }
    private void ClearElement(LockOperation rhs)
    {
        mvartt.UndoOperation(rhs);
        //auxSender.send(mvartt);
        clearElements();
    }


    private void clearElements()
    {
        mvartt.ClearSelection();
        mvartt.selElements.Clear();
    }

    // protected void OnShunt(int via)
    // {
    //     mvartt.ChangeCrossing("PN1", Common.crossingStatus.csOpen);
    //     switch (via)
    //     {
    //         case 1:
    //             mvartt.ChangeStatus("C02,C04", Common.layoutTraceStatus.ltShunt);
    //             mvartt.ChangeStatus("M1", Common.layoutTraceStatus.ltOccupied);
    //             mvartt.ChangePosition("C04", 0);
    //             mvartt.ChangePosition("C06", 0);
    //             mvartt.setSignalOrder("A1", Common.orderType.toAvisoDeParada);
    //             mvartt.setSignalOrder("E1", Common.orderType.toRebaseAutorizado);
    //             break;
    //         case 2:
    //             mvartt.ChangeStatus("C02,C04", Common.layoutTraceStatus.ltShunt);
    //             mvartt.ChangeStatus("M2", Common.layoutTraceStatus.ltOccupied);
    //             mvartt.ChangePosition("C04", 1);
    //             mvartt.ChangePosition("C06", 1);
    //             mvartt.setSignalOrder("A1", Common.orderType.toAvisoDeParada);
    //             mvartt.setSignalOrder("E1", Common.orderType.toRebaseAutorizado);
    //             break;
    //         case 3:
    //             mvartt.ChangeStatus("C01,C03", Common.layoutTraceStatus.ltShunt);
    //             mvartt.ChangeStatus("M3", Common.layoutTraceStatus.ltOccupied);
    //             mvartt.ChangePosition("C03", 1);
    //             mvartt.ChangePosition("C08", 1);
    //             mvartt.setSignalOrder("A2", Common.orderType.toAvisoDeParada);
    //             mvartt.setSignalOrder("E2", Common.orderType.toRebaseAutorizado);
    //             break;
    //         case 4:
    //             mvartt.ChangeStatus("C01,C03", Common.layoutTraceStatus.ltShunt);
    //             mvartt.ChangeStatus("M4", Common.layoutTraceStatus.ltOccupied);
    //             mvartt.ChangePosition("C03", 2);
    //             mvartt.ChangePosition("C08", 0);
    //             mvartt.setSignalOrder("A2", Common.orderType.toAvisoDeParada);
    //             mvartt.setSignalOrder("E2", Common.orderType.toRebaseAutorizado);
    //             break;
    //     }
    //     //auxSender.send(mvartt);
    // }




    }
